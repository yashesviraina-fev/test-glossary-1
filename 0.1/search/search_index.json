{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome To The Reference Architecture Please navigate to Glossary , Classic Architecture , Multicore Architecture or SOA Architecture according to the requirement","title":"Home"},{"location":"#welcome-to-the-reference-architecture","text":"Please navigate to Glossary , Classic Architecture , Multicore Architecture or SOA Architecture according to the requirement","title":"Welcome To The Reference Architecture"},{"location":"classic_glossary/","text":"BSW Abbreviation - Basic Software Domain - Software Meaning - Standardized software modules (mostly) with no explicit automotive job, but offers services needed to run the functional part of the upper software layer Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL RTE Abbreviation - Runtime Environment Domain - Software Meaning - Middleware which abstracts from the network topology for the inter- and intra-ECU information exchange between the application software components and between the Basic Software and the applications Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL ASW Abbreviation - Application Software Domain - Software Meaning - Application software components that interact with the runtime environment Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL Methodology Domain - Software Meaning - System Configuration Description includes all system information and the information agreed between different ECUs (e.g. definition of bus signals). ECU extract: contains the information from the System Configuration Description needed for a specific ECU (e.g. those signals where a specific ECU has access to). ECU Configuration Description: contains all basic software configuration information that is local to a specific ECU. Use this information to build the executable software, the code of the basic software modules and the code of the software components out of i Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL Microcontroller Abstraction Layer Abbreviation - MCAL Domain - Software Meaning - The Microcontroller Abstraction Layer is the lowest software layer of the Basic Software. It contains internal drivers, which are software modules with direct access to the \u03bcC and internal peripherals. Source - https://autosar.org Status - INITIAL ECU Abstraction Layer Domain - Software Meaning - The ECU Abstraction Layer interfaces the drivers of the Microcontroller Abstraction Layer. It also contains drivers for external devices. It offers an API for access to peripherals and devices regardless of their location (\u03bcC internal/external) and their connection to the \u03bcC (port pins, type of interface) Source - https://autosar.org Status - INITIAL Complex Drivers Layer Abbreviation - CDD Domain - Software Meaning - Provide the possibility to integrate special purpose functionality, e.g. drivers for devices: which are not specified within AUTOSAR, with very high timing constraints or for migration purposes etc. Source - https://autosar.org Status - INITIAL Services Layer Domain - Software Meaning - The Services Layer is the highest layer of the Basic Software which also applies for its relevance for the application software: while access to I/O signals is covered by the ECU Abstraction Layer, the Services Layer offers: Operating system functionality Vehicle network communication and management services Memory services (NVRAM management) Diagnostic Services (including UDS communication, error memory and fault treatment) ECU state management, mode management Logical and temporal program flow monitoring (Wdg manager) Source - https://autosar.org Status - INITIAL Handler Domain - Software Meaning - A handler is a specific interface which controls the concurrent, multiple and asynchronous access of one or multiple clients to one or more drivers. I.e. it performs buffering, queuing, arbitration, multiplexing. The handler does not change the content of the data. Handler functionality is often incorporated in the driver or interface (e.g. SPIHandlerDriver, ADC Driver). Source - https://autosar.org Status - INITIAL Manager Domain - Software Meaning - A manager offers specific services for multiple clients. It is needed in all cases where pure handler functionality is not enough to abstract from multiple clients. Besides handler functionality, a manager can evaluate and change or adapt the content of the data. In general, managers are located in the Services Layer Example: The NVRAM manager manages the concurrent access to internal and/or external memory devices like flash and EEPROM memory. It also performs distributed and reliable data storage, data checking, provision of default values etc. Source - https://autosar.org Status - INITIAL Libraries Domain - Software Meaning - Libraries are a collection of functions for related purposes Libraries: can be called by BSW modules (that including the RTE), SW-Cs, libraries or integration code run in the context of the caller in the same protection environment can only call libraries are re-entrant do not have internal states do not require any initialization are synchronous, i.e. they do not have wait points Source - https://autosar.org Status - INITIAL IOC Abbreviation - Inter OsApplication Communicator Domain - Software Meaning - The IOC provides communication services which can be accessed by clients which need to communicate across OS-Application boundaries on the same ECU. The IOC is part of the OS. Source - https://autosar.org Status - INITIAL AUTOSAR Interface Domain - Software Meaning - An \"AUTOSAR Interface\" defines the information exchanged between software components and/or BSW modules. This description is independent of a specific programming language, ECU or network technology. AUTOSAR Interfaces are used in defining the ports of software-components and/or BSW modules. Through these ports software-components and/or BSW modules can communicate with each other (send or receive information or invoke services). AUTOSAR makes it possible to implement this communication between Software-Components and/or BSW modules either locally or via a network. Source - https://autosar.org Status - INITIAL Standardized AUTOSAR Interface Domain - Software Meaning - A \"Standardized AUTOSAR Interface\" is an \"AUTOSAR Interface\" whose syntax and semantics are standardized in AUTOSAR. The \"Standardized AUTOSAR Interfaces\" are typically used to define AUTOSAR Services, which are standardized services provided by the AUTOSAR Basic Software to the application Software-Components. Source - https://autosar.org Status - INITIAL Standardized Interface Domain - Software Meaning - A \"Standardized Interface\" is an API which is standardized within AUTOSAR without using the \"AUTOSAR Interface\" technique. These \"Standardized Interfaces\" are typically defined for a specific programming language (like \"C\"). Because of this, \"standardized interfaces\" are typically used between software-modules which are always on the same ECU. When software modules communicate through a \"standardized interface\", it is NOT possible any more to route the communication between the software-modules through a network. Source - https://autosar.org Status - INITIAL SDU Abbreviation - Service Data Unit Domain - Software Meaning - SDU is the abbreviation of \u201cService Data Unit\u201d. It is the data passed by an upper layer, with the request to transmit the data. It is as well the data which is extracted after reception by the lower layer and passed to the upper layer. A SDU is part of a PDU. Source - https://autosar.org Status - INITIAL PDU Abbreviation - Protocol Data Unit Domain - Software Meaning - PDU is the abbreviation of \u201cProtocol Data Unit\u201d. The PDU contains SDU and PCI. On the transmission side the PDU is passed from the upper layer to the lower layer, which interprets this PDU as its SDU. Source - https://autosar.org Status - INITIAL Pre-compile time Domain - Software Meaning - Preprocessor instructions Code generation (selection or synthetization) Source - https://autosar.org Status - INITIAL","title":"Classic glossary"},{"location":"classic_glossary/#bsw","text":"Abbreviation - Basic Software Domain - Software Meaning - Standardized software modules (mostly) with no explicit automotive job, but offers services needed to run the functional part of the upper software layer Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL","title":"BSW"},{"location":"classic_glossary/#rte","text":"Abbreviation - Runtime Environment Domain - Software Meaning - Middleware which abstracts from the network topology for the inter- and intra-ECU information exchange between the application software components and between the Basic Software and the applications Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL","title":"RTE"},{"location":"classic_glossary/#asw","text":"Abbreviation - Application Software Domain - Software Meaning - Application software components that interact with the runtime environment Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL","title":"ASW"},{"location":"classic_glossary/#methodology","text":"Domain - Software Meaning - System Configuration Description includes all system information and the information agreed between different ECUs (e.g. definition of bus signals). ECU extract: contains the information from the System Configuration Description needed for a specific ECU (e.g. those signals where a specific ECU has access to). ECU Configuration Description: contains all basic software configuration information that is local to a specific ECU. Use this information to build the executable software, the code of the basic software modules and the code of the software components out of i Source - https://en.wikipedia.org/wiki/AUTOSAR Status - INITIAL","title":"Methodology"},{"location":"classic_glossary/#microcontroller-abstraction-layer","text":"Abbreviation - MCAL Domain - Software Meaning - The Microcontroller Abstraction Layer is the lowest software layer of the Basic Software. It contains internal drivers, which are software modules with direct access to the \u03bcC and internal peripherals. Source - https://autosar.org Status - INITIAL","title":"Microcontroller Abstraction Layer"},{"location":"classic_glossary/#ecu-abstraction-layer","text":"Domain - Software Meaning - The ECU Abstraction Layer interfaces the drivers of the Microcontroller Abstraction Layer. It also contains drivers for external devices. It offers an API for access to peripherals and devices regardless of their location (\u03bcC internal/external) and their connection to the \u03bcC (port pins, type of interface) Source - https://autosar.org Status - INITIAL","title":"ECU Abstraction Layer"},{"location":"classic_glossary/#complex-drivers-layer","text":"Abbreviation - CDD Domain - Software Meaning - Provide the possibility to integrate special purpose functionality, e.g. drivers for devices: which are not specified within AUTOSAR, with very high timing constraints or for migration purposes etc. Source - https://autosar.org Status - INITIAL","title":"Complex Drivers Layer"},{"location":"classic_glossary/#services-layer","text":"Domain - Software Meaning - The Services Layer is the highest layer of the Basic Software which also applies for its relevance for the application software: while access to I/O signals is covered by the ECU Abstraction Layer, the Services Layer offers: Operating system functionality Vehicle network communication and management services Memory services (NVRAM management) Diagnostic Services (including UDS communication, error memory and fault treatment) ECU state management, mode management Logical and temporal program flow monitoring (Wdg manager) Source - https://autosar.org Status - INITIAL","title":"Services Layer"},{"location":"classic_glossary/#handler","text":"Domain - Software Meaning - A handler is a specific interface which controls the concurrent, multiple and asynchronous access of one or multiple clients to one or more drivers. I.e. it performs buffering, queuing, arbitration, multiplexing. The handler does not change the content of the data. Handler functionality is often incorporated in the driver or interface (e.g. SPIHandlerDriver, ADC Driver). Source - https://autosar.org Status - INITIAL","title":"Handler"},{"location":"classic_glossary/#manager","text":"Domain - Software Meaning - A manager offers specific services for multiple clients. It is needed in all cases where pure handler functionality is not enough to abstract from multiple clients. Besides handler functionality, a manager can evaluate and change or adapt the content of the data. In general, managers are located in the Services Layer Example: The NVRAM manager manages the concurrent access to internal and/or external memory devices like flash and EEPROM memory. It also performs distributed and reliable data storage, data checking, provision of default values etc. Source - https://autosar.org Status - INITIAL","title":"Manager"},{"location":"classic_glossary/#libraries","text":"Domain - Software Meaning - Libraries are a collection of functions for related purposes Libraries: can be called by BSW modules (that including the RTE), SW-Cs, libraries or integration code run in the context of the caller in the same protection environment can only call libraries are re-entrant do not have internal states do not require any initialization are synchronous, i.e. they do not have wait points Source - https://autosar.org Status - INITIAL","title":"Libraries"},{"location":"classic_glossary/#ioc","text":"Abbreviation - Inter OsApplication Communicator Domain - Software Meaning - The IOC provides communication services which can be accessed by clients which need to communicate across OS-Application boundaries on the same ECU. The IOC is part of the OS. Source - https://autosar.org Status - INITIAL","title":"IOC"},{"location":"classic_glossary/#autosar-interface","text":"Domain - Software Meaning - An \"AUTOSAR Interface\" defines the information exchanged between software components and/or BSW modules. This description is independent of a specific programming language, ECU or network technology. AUTOSAR Interfaces are used in defining the ports of software-components and/or BSW modules. Through these ports software-components and/or BSW modules can communicate with each other (send or receive information or invoke services). AUTOSAR makes it possible to implement this communication between Software-Components and/or BSW modules either locally or via a network. Source - https://autosar.org Status - INITIAL","title":"AUTOSAR Interface"},{"location":"classic_glossary/#standardized-autosar-interface","text":"Domain - Software Meaning - A \"Standardized AUTOSAR Interface\" is an \"AUTOSAR Interface\" whose syntax and semantics are standardized in AUTOSAR. The \"Standardized AUTOSAR Interfaces\" are typically used to define AUTOSAR Services, which are standardized services provided by the AUTOSAR Basic Software to the application Software-Components. Source - https://autosar.org Status - INITIAL","title":"Standardized AUTOSAR Interface"},{"location":"classic_glossary/#standardized-interface","text":"Domain - Software Meaning - A \"Standardized Interface\" is an API which is standardized within AUTOSAR without using the \"AUTOSAR Interface\" technique. These \"Standardized Interfaces\" are typically defined for a specific programming language (like \"C\"). Because of this, \"standardized interfaces\" are typically used between software-modules which are always on the same ECU. When software modules communicate through a \"standardized interface\", it is NOT possible any more to route the communication between the software-modules through a network. Source - https://autosar.org Status - INITIAL","title":"Standardized Interface"},{"location":"classic_glossary/#sdu","text":"Abbreviation - Service Data Unit Domain - Software Meaning - SDU is the abbreviation of \u201cService Data Unit\u201d. It is the data passed by an upper layer, with the request to transmit the data. It is as well the data which is extracted after reception by the lower layer and passed to the upper layer. A SDU is part of a PDU. Source - https://autosar.org Status - INITIAL","title":"SDU"},{"location":"classic_glossary/#pdu","text":"Abbreviation - Protocol Data Unit Domain - Software Meaning - PDU is the abbreviation of \u201cProtocol Data Unit\u201d. The PDU contains SDU and PCI. On the transmission side the PDU is passed from the upper layer to the lower layer, which interprets this PDU as its SDU. Source - https://autosar.org Status - INITIAL","title":"PDU"},{"location":"classic_glossary/#pre-compile-time","text":"Domain - Software Meaning - Preprocessor instructions Code generation (selection or synthetization) Source - https://autosar.org Status - INITIAL","title":"Pre-compile time"},{"location":"classic_multicore_ref_arch/","text":"Download Multicore Architecture PPT","title":"Classic multicore ref arch"},{"location":"classic_ref_sw_arch_2022/","text":"Classic Architecture Download Classic Architecture PPT Multicore Architecture Download Multicore Architecture PPT","title":"Classic"},{"location":"classic_ref_sw_arch_2022/#classic-architecture","text":"Download Classic Architecture PPT","title":"Classic Architecture"},{"location":"classic_ref_sw_arch_2022/#multicore-architecture","text":"Download Multicore Architecture PPT","title":"Multicore Architecture"},{"location":"soa_ref_arch_layers/","text":"Download SOA Architecture PPT","title":"SOA"},{"location":"swrefarch_glossary/","text":"Application Components Status - INITIAL Meaning - This software implements the features, which are directly felt by the end user Example : Lane centering, Lane Keep Assist, Lane Change Decision. Source - ZF Responsibility / Owner - Central Software Architecture Application Layer Status - INITIAL Meaning - This layer consists of deliverable features, functions which can be experienced by End users. It also includes 3rd party vendor or customer features & functions. Examples : Lateral Support System (LSS). Application layer is divided into 2 parts :- Application Components Application Service Components Source - ZF Responsibility / Owner - Central Software Architecture Application Service Components Status - INITIAL Meaning - This software implements functions which are required to fulfill features defined in Application components. Example : Perception, CubiX Source - ZF Responsibility / Owner - Central Software Architecture Bootloader Status - INITIAL Meaning - The bootloader will initialize necessary hardware, then find the next valid application software to run. In some cases it loads that application software into memory, and then jump to start of this program to start executing it. Source - https://www.embedded.com/bootloaders-101-making-your-embedded-design-future-proof/ Responsibility / Owner - External BSP Abbreviation - board support package Status - INITIAL Meaning - This layer conains software for hardware-specific drivers and other routines that allows operating system (traditionally a real-time operating system, or RTOS) to function on a dedicated hardware environment. Third-party developers who wish to support a given RTOS must create a BSP that allows RTOS to run on their platform. In most cases, RTOS and BSP are bundled together by the hardware vendor. Source - https://en.wikipedia.org/wiki/Board_support_package Responsibility / Owner - External Feature (Customer / Vehicle) Status - INITIAL Meaning - This layer consists of the software which the user is able to touch or feel and is directly linked to end user expereince 1:n mapping to underlying functions expected (a feature consists of multiple SW-Functions) Examples: ACC, AEB, Predictive Maintenance Source - ZF Responsibility / Owner - Operation Field [Resort - Division/Department] Function (System Level) Status - INITIAL Meaning - This layer consists of the software which the end-user does not care about directly but is necesssary to address the feature exectution needs on architecture level 1:1 mapping to underlying functions expected, 1:n mapping possible for detailed view x000b (system function as one unit, but could be decomposed into multiple SW-Functions) Examples: AD Gen 1.5 Trajectory Planner L4, Lane Data Interface LKA Source - ZF Responsibility / Owner - Operation Field [Resort - Division/Department] Function Adapter Status - INITIAL Meaning - This layer consists of the software which realizes abstract communication between Software Component and Middleware. For every software component, there exist a function adapter. The interfaces of function adapter is described in human readable Interface Discription Langauge. Source - ZF Responsibility / Owner - Central Software Architecture Hardware Support Layer Status - INITIAL Meaning - This layer shall consists of the components to adapt different HW and devices specific SW. It can automate choice of resource to run a function/feature and has configuration settings necessary to run SW on various hardware elements.. E.g. : Drivers, frame server, fan control etc Source - ZF Responsibility / Owner - Central Software Architecture Hypervisor Status - INITIAL Meaning - An embedded hypervisor is software that allows more than one operating system (OS) to run simultaneously on a single system on a chip (SoC). It enables system designers to consolidate diverse operating systems (OSs) and applications with different reliability, safety and security requirements on one SoC. Type 1 Hypervisor runs directly on hardware Type 2 Hypervisor run on Host OS Source - https://www.embedded.com/embedded-hypervisors/ Responsibility / Owner - External IDL Abbreviation - Interface Discription Langauge Status - INITIAL Meaning - Interface Description Language, describes the interfaces of software component in platform independent way. It can be realsized in JSON or arxml format. Source - ZF Responsibility / Owner - Central Software Architecture Middleware Layer Status - INITIAL Meaning - Middleware is the infrastructure which facilitates execution of core services which will be utilized by Application layer. This enables communication and data management for Application service components It is stable and configrable platform abstracting the layer below. Middleware works as an abstraction layer that abstract the details about hardware and thus allows independent development of Application lyer. Middleware layers are defined in architecture ppt, click here to view layers in ppt Source - ZF Responsibility / Owner - Central Software Architecture Midleware Stack Status - INITIAL Meaning - Middleware enables communication and data management for distributed features/functions. This includes Service Manager which queries Platform abstraction for capabilities Source - ZF Responsibility / Owner - Central Software Architecture OS Abbreviation - Operating system Status - INITIAL Meaning - This is software system manages hardware CPU, peripheral, software resources and provide common resources to all applications. It provides mechanisms to handle concurrent access mechanism with safety. Source - https://en.wikipedia.org/wiki/Operating_system Responsibility / Owner - External Service Status - INITIAL Meaning - A service is a discrete unit of functionality which can be remotely accessed and independently updated. It is a collection of self-contained services (system functions) that communicate with well-defined messages without any knowledge of location and implementation of each other. SOA is a software architecture that starts with an interface definition and builds the entire feature with predefined interfaces. Typical communication patterns are publish-subscribe, the Remote Procedure Call (RPC) and the fire-forget method driven by feature requirement. SOA is a relationship of service providers and service consumers, both software components large enough to represent a complete feature/function. Following is not SOA service definition :- Service in ROS are just synchronous remote procedure calls; they allow one node to call a function that executes in another node. A ROS service is a client/server system. It is synchronous. The client sends a requests, and blocks until it receives a response. A service is defined by a name, and a pair of messages. Source - ZF Responsibility / Owner - Central Software Architecture SOA Abbreviation - Service Oriented Architecture Status - INITIAL Meaning - Service-orientated Architecture (SoA) is a way of designing architecture where the participating components provide and consume services over a predefined protocol over a network. It is a software development model that allows services to communicate across different programs through function adapter to form feature. In SOA, a service is a self-contained unit of software designed to complete a specific feature. allows the decoupling of services from the underlying hardware and network infrastructure implemented as individual software components(SWCs) the communication among SWCs occurs through well-defined standard interfaces Service oriented architecture layers are defined in architecture ppt, click here to view layers in ppt Source - https://en.wikipedia.org/wiki/Service-oriented_architecture Responsibility / Owner - External SoC Abbreviation - System on chip Status - INITIAL Meaning - A system on a chip is an integrated circuit that combines many elements of a computer system into a single chip. An SoC always includes a CPU, but it may also include system memory, peripheral controllers (for USB, storage), and more advanced peripherals such as graphics processing units (GPUs), specialized neural network circuitry, radio modems (for Bluetooth or Wi-Fi), depending on the chip hardwre achitecture. Source - https://en.wikipedia.org/wiki/System_on_a_chip Responsibility / Owner - External Software Status - INITIAL Meaning - It is a collection of data or computer instructions that tell the computer how to work Source - https://en.wikipedia.org/wiki/Software Responsibility / Owner - External System Service Components Status - INITIAL Meaning - This component implmentes either the OEM specific infrastructure add-on components and also the abstraction for several services from base software to application service layer. Goal is to be bale to update the Application service components within very minimum integration efforts. Source - ZF Responsibility / Owner - Central Software Architecture","title":"Glossary"},{"location":"swrefarch_glossary/#application-components","text":"Status - INITIAL Meaning - This software implements the features, which are directly felt by the end user Example : Lane centering, Lane Keep Assist, Lane Change Decision. Source - ZF Responsibility / Owner - Central Software Architecture","title":"Application Components"},{"location":"swrefarch_glossary/#application-layer","text":"Status - INITIAL Meaning - This layer consists of deliverable features, functions which can be experienced by End users. It also includes 3rd party vendor or customer features & functions. Examples : Lateral Support System (LSS). Application layer is divided into 2 parts :- Application Components Application Service Components Source - ZF Responsibility / Owner - Central Software Architecture","title":"Application Layer"},{"location":"swrefarch_glossary/#application-service-components","text":"Status - INITIAL Meaning - This software implements functions which are required to fulfill features defined in Application components. Example : Perception, CubiX Source - ZF Responsibility / Owner - Central Software Architecture","title":"Application Service Components"},{"location":"swrefarch_glossary/#bootloader","text":"Status - INITIAL Meaning - The bootloader will initialize necessary hardware, then find the next valid application software to run. In some cases it loads that application software into memory, and then jump to start of this program to start executing it. Source - https://www.embedded.com/bootloaders-101-making-your-embedded-design-future-proof/ Responsibility / Owner - External","title":"Bootloader"},{"location":"swrefarch_glossary/#bsp","text":"Abbreviation - board support package Status - INITIAL Meaning - This layer conains software for hardware-specific drivers and other routines that allows operating system (traditionally a real-time operating system, or RTOS) to function on a dedicated hardware environment. Third-party developers who wish to support a given RTOS must create a BSP that allows RTOS to run on their platform. In most cases, RTOS and BSP are bundled together by the hardware vendor. Source - https://en.wikipedia.org/wiki/Board_support_package Responsibility / Owner - External","title":"BSP"},{"location":"swrefarch_glossary/#feature-customer-vehicle","text":"Status - INITIAL Meaning - This layer consists of the software which the user is able to touch or feel and is directly linked to end user expereince 1:n mapping to underlying functions expected (a feature consists of multiple SW-Functions) Examples: ACC, AEB, Predictive Maintenance Source - ZF Responsibility / Owner - Operation Field [Resort - Division/Department]","title":"Feature (Customer / Vehicle)"},{"location":"swrefarch_glossary/#function-system-level","text":"Status - INITIAL Meaning - This layer consists of the software which the end-user does not care about directly but is necesssary to address the feature exectution needs on architecture level 1:1 mapping to underlying functions expected, 1:n mapping possible for detailed view x000b (system function as one unit, but could be decomposed into multiple SW-Functions) Examples: AD Gen 1.5 Trajectory Planner L4, Lane Data Interface LKA Source - ZF Responsibility / Owner - Operation Field [Resort - Division/Department]","title":"Function (System Level)"},{"location":"swrefarch_glossary/#function-adapter","text":"Status - INITIAL Meaning - This layer consists of the software which realizes abstract communication between Software Component and Middleware. For every software component, there exist a function adapter. The interfaces of function adapter is described in human readable Interface Discription Langauge. Source - ZF Responsibility / Owner - Central Software Architecture","title":"Function Adapter"},{"location":"swrefarch_glossary/#hardware-support-layer","text":"Status - INITIAL Meaning - This layer shall consists of the components to adapt different HW and devices specific SW. It can automate choice of resource to run a function/feature and has configuration settings necessary to run SW on various hardware elements.. E.g. : Drivers, frame server, fan control etc Source - ZF Responsibility / Owner - Central Software Architecture","title":"Hardware Support Layer"},{"location":"swrefarch_glossary/#hypervisor","text":"Status - INITIAL Meaning - An embedded hypervisor is software that allows more than one operating system (OS) to run simultaneously on a single system on a chip (SoC). It enables system designers to consolidate diverse operating systems (OSs) and applications with different reliability, safety and security requirements on one SoC. Type 1 Hypervisor runs directly on hardware Type 2 Hypervisor run on Host OS Source - https://www.embedded.com/embedded-hypervisors/ Responsibility / Owner - External","title":"Hypervisor"},{"location":"swrefarch_glossary/#idl","text":"Abbreviation - Interface Discription Langauge Status - INITIAL Meaning - Interface Description Language, describes the interfaces of software component in platform independent way. It can be realsized in JSON or arxml format. Source - ZF Responsibility / Owner - Central Software Architecture","title":"IDL"},{"location":"swrefarch_glossary/#middleware-layer","text":"Status - INITIAL Meaning - Middleware is the infrastructure which facilitates execution of core services which will be utilized by Application layer. This enables communication and data management for Application service components It is stable and configrable platform abstracting the layer below. Middleware works as an abstraction layer that abstract the details about hardware and thus allows independent development of Application lyer. Middleware layers are defined in architecture ppt, click here to view layers in ppt Source - ZF Responsibility / Owner - Central Software Architecture","title":"Middleware Layer"},{"location":"swrefarch_glossary/#midleware-stack","text":"Status - INITIAL Meaning - Middleware enables communication and data management for distributed features/functions. This includes Service Manager which queries Platform abstraction for capabilities Source - ZF Responsibility / Owner - Central Software Architecture","title":"Midleware Stack"},{"location":"swrefarch_glossary/#os","text":"Abbreviation - Operating system Status - INITIAL Meaning - This is software system manages hardware CPU, peripheral, software resources and provide common resources to all applications. It provides mechanisms to handle concurrent access mechanism with safety. Source - https://en.wikipedia.org/wiki/Operating_system Responsibility / Owner - External","title":"OS"},{"location":"swrefarch_glossary/#service","text":"Status - INITIAL Meaning - A service is a discrete unit of functionality which can be remotely accessed and independently updated. It is a collection of self-contained services (system functions) that communicate with well-defined messages without any knowledge of location and implementation of each other. SOA is a software architecture that starts with an interface definition and builds the entire feature with predefined interfaces. Typical communication patterns are publish-subscribe, the Remote Procedure Call (RPC) and the fire-forget method driven by feature requirement. SOA is a relationship of service providers and service consumers, both software components large enough to represent a complete feature/function. Following is not SOA service definition :- Service in ROS are just synchronous remote procedure calls; they allow one node to call a function that executes in another node. A ROS service is a client/server system. It is synchronous. The client sends a requests, and blocks until it receives a response. A service is defined by a name, and a pair of messages. Source - ZF Responsibility / Owner - Central Software Architecture","title":"Service"},{"location":"swrefarch_glossary/#soa","text":"Abbreviation - Service Oriented Architecture Status - INITIAL Meaning - Service-orientated Architecture (SoA) is a way of designing architecture where the participating components provide and consume services over a predefined protocol over a network. It is a software development model that allows services to communicate across different programs through function adapter to form feature. In SOA, a service is a self-contained unit of software designed to complete a specific feature. allows the decoupling of services from the underlying hardware and network infrastructure implemented as individual software components(SWCs) the communication among SWCs occurs through well-defined standard interfaces Service oriented architecture layers are defined in architecture ppt, click here to view layers in ppt Source - https://en.wikipedia.org/wiki/Service-oriented_architecture Responsibility / Owner - External","title":"SOA"},{"location":"swrefarch_glossary/#soc","text":"Abbreviation - System on chip Status - INITIAL Meaning - A system on a chip is an integrated circuit that combines many elements of a computer system into a single chip. An SoC always includes a CPU, but it may also include system memory, peripheral controllers (for USB, storage), and more advanced peripherals such as graphics processing units (GPUs), specialized neural network circuitry, radio modems (for Bluetooth or Wi-Fi), depending on the chip hardwre achitecture. Source - https://en.wikipedia.org/wiki/System_on_a_chip Responsibility / Owner - External","title":"SoC"},{"location":"swrefarch_glossary/#software","text":"Status - INITIAL Meaning - It is a collection of data or computer instructions that tell the computer how to work Source - https://en.wikipedia.org/wiki/Software Responsibility / Owner - External","title":"Software"},{"location":"swrefarch_glossary/#system-service-components","text":"Status - INITIAL Meaning - This component implmentes either the OEM specific infrastructure add-on components and also the abstraction for several services from base software to application service layer. Goal is to be bale to update the Application service components within very minimum integration efforts. Source - ZF Responsibility / Owner - Central Software Architecture","title":"System Service Components"}]}